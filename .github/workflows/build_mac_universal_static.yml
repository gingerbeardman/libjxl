name: Build (Mac, Universal)
on: [push]
jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Remove Mono
        run: sudo rm -rf /Library/Frameworks/Mono.framework &&
          sudo pkgutil --forget com.xamarin.mono-MDK.pkg &&
          sudo rm /etc/paths.d/mono-commands
      - name: Set up Homebrew paths
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            echo "HOMEBREW_PREFIX=/usr/local" >> $GITHUB_ENV
            echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV
          else
            echo "HOMEBREW_PREFIX=/opt/homebrew" >> $GITHUB_ENV
            echo "PATH=/opt/homebrew/bin:$PATH" >> $GITHUB_ENV
          fi
      - name: Install architecture-specific Homebrew
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            if [ -d /opt/homebrew ]; then
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            arch -x86_64 brew install llvm@15 coreutils cmake giflib jpeg-turbo libpng ninja zlib doxygen
          else
            brew install llvm@15 coreutils cmake giflib jpeg-turbo libpng ninja zlib doxygen
          fi
      - name: Install more dependencies
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            arch -x86_64 ./deps.sh
          else
            ./deps.sh
          fi
      - name: Build
        env:
          CIBW_ARCHS_MACOS: "auto universal2"
          MACOSX_DEPLOYMENT_TARGET: "${{ matrix.arch == 'x86_64' && '10.15' || '11.0' }}"
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            export PATH=/usr/local/opt/llvm/bin:$PATH
            export CMAKE_PREFIX_PATH=/usr/local/opt/giflib:/usr/local/opt/jpeg-turbo:/usr/local/opt/libpng:/usr/local/opt/zlib
            arch -x86_64 /bin/bash -c "
              export CMAKE_CXX_FLAGS='-DSKCMS_PORTABLE -std=c++17'
              export LDFLAGS='-L\$HOMEBREW_PREFIX/opt/llvm@15/lib/c++ -Wl,-rpath,\$HOMEBREW_PREFIX/opt/llvm@15/lib/c++'
              export CFLAGS='-target x86_64-apple-macos10.15'
              export CXXFLAGS='-target x86_64-apple-macos10.15 -std=c++17'
              export CMAKE_OSX_ARCHITECTURES='x86_64'
              
              cmake -B\${PWD}/build -H\${PWD} \\
                -DCMAKE_BUILD_TYPE=Release \\
                -GNinja \\
                -DBUILD_SHARED_LIBS=OFF \\
                -DJPEGXL_STATIC=ON \\
                -DJPEGXL_ENABLE_JPEGLI_LIBJPEG=OFF \\
                -DJPEGXL_ENABLE_JPEGLI=ON \\
                -DJPEGXL_ENABLE_MANPAGES=OFF \\
                -DJPEGXL_ENABLE_JNI=OFF \\
                -DJPEGXL_ENABLE_SJPEG=OFF \\
                -DJPEGXL_ENABLE_DOXYGEN=OFF \\
                -DJPEGXL_ENABLE_VIEWERS=OFF \\
                -DJPEGXL_ENABLE_PLUGINS=OFF \\
                -DJPEGXL_ENABLE_OPENEXR=OFF \\
                -DJPEGXL_ENABLE_BENCHMARK=OFF \\
                -DBUILD_TESTING=OFF \\
                -DCMAKE_OSX_ARCHITECTURES=\${CMAKE_OSX_ARCHITECTURES} \\
                -DCMAKE_THREAD_LIBS_INIT='-pthread' \\
                -DTHREADS_PREFER_PTHREAD_FLAG=ON \\
                -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \\
                -DCMAKE_CXX_STANDARD=17 && \\
              ninja cjxl djxl
            "
          else
            export PATH=/opt/homebrew/opt/llvm/bin:$PATH
            export CMAKE_PREFIX_PATH=/opt/homebrew/opt/giflib:/opt/homebrew/opt/jpeg-turbo:/opt/homebrew/opt/libpng:/opt/homebrew/opt/zlib
            export CMAKE_CXX_FLAGS="-DSKCMS_PORTABLE -std=c++17"
            export LDFLAGS="-L$HOMEBREW_PREFIX/opt/llvm@15/lib/c++ -Wl,-rpath,$HOMEBREW_PREFIX/opt/llvm@15/lib/c++"
            export CFLAGS="-target arm64-apple-macos11"
            export CXXFLAGS="-target arm64-apple-macos11 -std=c++17"
            export CMAKE_OSX_ARCHITECTURES="arm64"
            
            cmake -B${PWD}/build -H${PWD} \
              -DCMAKE_BUILD_TYPE=Release \
              -GNinja \
              -DBUILD_SHARED_LIBS=OFF \
              -DJPEGXL_STATIC=ON \
              -DJPEGXL_ENABLE_JPEGLI_LIBJPEG=OFF \
              -DJPEGXL_ENABLE_JPEGLI=ON \
              -DJPEGXL_ENABLE_MANPAGES=OFF \
              -DJPEGXL_ENABLE_JNI=OFF \
              -DJPEGXL_ENABLE_SJPEG=OFF \
              -DJPEGXL_ENABLE_DOXYGEN=OFF \
              -DJPEGXL_ENABLE_VIEWERS=OFF \
              -DJPEGXL_ENABLE_PLUGINS=OFF \
              -DJPEGXL_ENABLE_OPENEXR=OFF \
              -DJPEGXL_ENABLE_BENCHMARK=OFF \
              -DBUILD_TESTING=OFF \
              -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES} \
              -DCMAKE_THREAD_LIBS_INIT="-pthread" \
              -DTHREADS_PREFER_PTHREAD_FLAG=ON \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
              -DCMAKE_CXX_STANDARD=17 && \
            ninja cjxl djxl
          fi
      # Rest of the workflow remains the same...
      - name: Calculate checksum
        run: |
          shasum -a 256 build/tools/cjxl
          shasum -a 256 build/tools/djxl
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-mac-${{ matrix.arch }}
          path: |
            build/tools/cjxl
            build/tools/djxl
      - name: Zip
        if: startsWith(github.ref, 'refs/tags/')
        run: cd build/tools && zip jpeg-xl-macos-${{ matrix.arch }}-static.zip cjxl djxl
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build/tools/jpeg-xl-macos-${{ matrix.arch }}-static.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
